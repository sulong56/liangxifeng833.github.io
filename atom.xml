<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Lxf's blog]]></title>
  <subtitle><![CDATA[低调做人，高调做事！]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://liangxifeng.com/"/>
  <updated>2015-02-03T00:58:48.318Z</updated>
  <id>http://liangxifeng.com/</id>
  
  <author>
    <name><![CDATA[liangxifeng]]></name>
    <email><![CDATA[liangxifeng833@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[设计模式（一）工厂模式]]></title>
    <link href="http://liangxifeng.com/2015/01/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://liangxifeng.com/2015/01/26/设计模式（一）工厂模式/</id>
    <published>2015-01-26T01:19:48.000Z</published>
    <updated>2015-02-03T00:58:31.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>在面向对象编程中，一些情况下, new操作符直接生成对象会带来一些问题。</li>
<li>举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例; 或在生成你需要的对象之前必须先生成一些辅助功能的对象。 在这些情况,新对象的建立就是一个 <code>过程</code>，不仅是一个操作，像一部大机器中的一个齿轮传动。</li>
<li>建立一个 <code>工厂来创建对象</code>，可以轻松方便地构造对象实例，而不必关心构造对象实例的细节和复杂过程。</li>
<li>工厂模式主要是为创建对象提供 <code>过渡接口</code>，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。 </li>
<li>GOF在《设计模式》一书中将工厂模式分为两类：工厂方法模式（Factory Method）与抽象工厂模式（Abstract Factory）。将简单工厂模式（Simple Factory）看为工厂方法模式的一种特例，两者归为一类。 </li>
<li>简单工厂模式实例代码：<a href="https://github.com/liangxifeng833/my_program/blob/master/php/OOP/factory/demo.php" target="_blank" rel="external">简单工厂模式</a></li>
<li>工厂方法模式：<ul>
<li>一个抽象产品类，可以派生出多个具体产品类。   </li>
<li>一个抽象工厂类，可以派生出多个具体工厂类。   </li>
<li>每个具体工厂类只能创建一个具体产品类的实例。</li>
<li>代码实例：<a href="https://github.com/liangxifeng833/my_program/blob/master/php/OOP/factory/factory_1.php" target="_blank" rel="external">工厂方法模式</a></li>
</ul>
</li>
<li>抽象工厂模式：<ul>
<li>多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。   </li>
<li>一个抽象工厂类，可以派生出多个具体工厂类。   </li>
<li>每个具体工厂类可以创建多个具体产品类的实例。 </li>
<li>代码实例：<a href="https://github.com/liangxifeng833/my_program/blob/master/php/OOP/factory/factory_2.php" target="_blank" rel="external">抽象工厂模式</a>  </li>
</ul>
</li>
<li><code>工厂方法</code> 与 <code>抽象工厂</code> 的区别：<ul>
<li>工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。   </li>
<li>工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。</li>
</ul>
</li>
</ul>
<h3 id="参考资料：">参考资料：</h3>
<p><a href="http://blog.csdn.net/hguisu/article/details/7505909" target="_blank" rel="external">设计模式（一）工厂模式Factory（创建型）</a><br><a href="http://blog.csdn.net/uuleaf/article/category/1151556" target="_blank" rel="external">PHP设计模式</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>在面向对象编程中，一些情况下, new操作符直接生成对象会带来一些问题。</li>
<li>举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例; 或在生成你需要的对象之前必须先生成一些辅助功能的对象。 ]]>
    </summary>
    
      <category term="面向对象" scheme="http://liangxifeng.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解面向对象设计原则]]></title>
    <link href="http://liangxifeng.com/2015/01/23/%E7%90%86%E8%A7%A3%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://liangxifeng.com/2015/01/23/理解面向对象设计原则/</id>
    <published>2015-01-23T14:38:54.000Z</published>
    <updated>2015-01-25T07:42:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一、单一职责原则SRP_（Single-Resposibility_Principle）">一、单一职责原则SRP （Single-Resposibility Principle）</h3>
<ul>
<li>一个类，最好只做 <code>一件事</code>，只有 <code>一个</code> 原因可以引起它的变化。</li>
<li>专注，是一个人优良的品质，同样的，<code>单一</code> 也是一个类的优良设计。</li>
<li>职责，我们可以理解他为 <code>功能</code>，就是设计的一个类功能应该只有一个，而不是两个或更多。</li>
<li>举例：在公司工作，要 <code>专人做专事</code>，比如我们公司：产品、视觉、开发、运维、测试等…每个岗位都会有 <code>专门</code> 的人负责。（大概在10月份左右公司的技术人员走了很多，基础工作还是要继续进行的，在没找来人之前是我一个人在负责的，真是 <code>恶梦</code> 啊，不过现在好些了，人员都匹配齐全了，嘿嘿，这件事情也明确说明了 <code>单一职责</code> 的重要性!）</li>
</ul>
<h3 id="二、开放封闭原则OCP（Open-Closed_principle）">二、开放封闭原则OCP（Open-Closed principle）</h3>
<ul>
<li>模块是 <code>可扩展</code> 的，而 <code>不可修改</code> 的。</li>
<li>对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。</li>
<li>对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。</li>
<li><code>抽象编程</code>，而不是具体编程，因为 <code>抽象相对稳定</code>。让类依赖于固定的抽象，所以修改就是 <code>封闭</code> 的；而通过面向对象的 <code>继承和多态机制</code>，又可以实现对抽象类的 <code>继承</code>，通过覆写其方法来改变固有行为，实现新的拓展方法，所以就是 <code>开放</code> 的。 </li>
<li>平时用户的需求是千变万化的，比如：遇到个精神病老板，所以不论需求如何变化，我们的软件结构都要保持 <code>内部的封装体系稳定，不被需求的变化影响</code>。<ul>
<li>当新需求出现的时候，可以通过扩展现有模型达到目的。</li>
<li>对已有的二进制代码，如dll,jar等，则不允许做任何修改。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Policy</span></span>{  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] i ={ <span class="number">1</span>, <span class="number">1234</span>, <span class="number">1234</span>, <span class="number">1234</span>, <span class="number">132</span> };  </div><div class="line">    <span class="keyword">public</span> bool <span class="title">Sort</span>(){  </div><div class="line">        SortImp();  </div><div class="line">    }  </div><div class="line">    <span class="keyword">protected</span> virtual bool <span class="title">SortImp</span>(){  </div><div class="line">   </div><div class="line">    }  </div><div class="line">}</div><div class="line">class Bubbleimp : Policy{  </div><div class="line">    <span class="keyword">protected</span> override bool <span class="title">SortImp</span>(){  </div><div class="line">        <span class="comment">//冒泡排序  </span></div><div class="line">    }  </div><div class="line">}  </div><div class="line">class Bintreeimp : Policy{  </div><div class="line">    <span class="keyword">protected</span> override bool <span class="title">SortImp</span>(){  </div><div class="line">        <span class="comment">//二分法排序  </span></div><div class="line">    }  </div><div class="line">}  </div><div class="line"><span class="comment">//主函数中实现  </span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> Main(string[] args){  </div><div class="line">    <span class="comment">//如果要使用冒泡排序，只要把下面的Bintreeimp改为Bubbleimp  </span></div><div class="line">    Policy sort = <span class="keyword">new</span> Bintreeimp();  </div><div class="line">    sort.Sort();  </div><div class="line">}</div></pre></td></tr></table></figure>

<ul>
<li>使用OCP注意点：<ul>
<li>实现OCP原则的 <code>关键是抽象</code>。</li>
<li>两种安全的实现开闭原则的设计模式是：Strategy pattern（策略模式），Template Methord（模版方法模式）。</li>
<li>依据开闭原则,我们尽量不要修改类,只扩展类,但在有些情况下会出现一些比较怪异的状况，这时可以采用几个类进行组合来完成。</li>
<li>在许多方面，OCP是面向对象设计的核心所在。遵循这个原则可带来面向对象技术所声称的巨大好处（灵活性、可重用性以及可维护性）。然而，对于应用程序的每个部分都肆意地进行抽象并不是一个好主意。应该仅仅对程序中呈现出频繁变化的那部分作出抽象。拒绝不成熟的抽象和抽象本身一样重要。</li>
</ul>
</li>
</ul>
<h3 id="三、里氏替换原则LSP（Liskov-Substituion_Principle）">三、里氏替换原则LSP（Liskov-Substituion Principle）</h3>
<ul>
<li>通俗的讲：子类可以扩展父类的功能，但不能改变父类原有的功能。</li>
<li>四层含义：<br>1、子类可以实现父类的 <code>抽象方法</code>，但是不能覆盖父类的 <code>非抽象方法</code>。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">(<span class="variable">$a</span>,<span class="variable">$b</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> (int)<span class="variable">$a</span> + (int)<span class="variable">$b</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> <span class="keyword">extends</span> <span class="title">C</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">(<span class="variable">$a</span>,<span class="variable">$b</span>)</span> //替换了父类的非抽象方法</span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> (int)<span class="variable">$a</span> - (int)<span class="variable">$b</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$test</span> = <span class="keyword">new</span> C1;</div><div class="line"><span class="comment">//原本以为是10+1，但是子类替换父类的非抽象方法，导致结果是10-1</span></div><div class="line"><span class="keyword">echo</span> <span class="variable">$test</span><span class="variable">-&gt;func</span>(<span class="number">10</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>

<p>2、子类中可以增加 <code>自己特有</code> 的方法<br>在继承父类属性和方法的同时，每个子类也都可以有自己的个性，在父类的基础上扩展自己的功能。前面其实已经提到，当功能扩展时，子类尽量不要重写父类的方法，而是另写一个方法，所以对上面的代码加以更改，使其符合里氏替换原则，代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span><span class="params">(<span class="variable">$a</span>,<span class="variable">$b</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> (int)<span class="variable">$a</span> + (int)<span class="variable">$b</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> <span class="keyword">extends</span> <span class="title">C</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">func2</span><span class="params">(<span class="variable">$a</span>,<span class="variable">$b</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> (int)<span class="variable">$a</span> - (int)<span class="variable">$b</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$test</span> = <span class="keyword">new</span> C1;</div><div class="line"><span class="keyword">echo</span> <span class="variable">$test</span><span class="variable">-&gt;func</span>(<span class="number">10</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure>

<p>3、当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松<br>4、当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格<br>3和4 在java的程序中更好理解，php我目前位置不算太理解。</p>
<ul>
<li>总结一下：其实 <code>里氏替换原则LSP</code> 主要是在说面向对象三大特性之一<code>继承</code> ，在给程序设计带来巨大便利的同时，也带来了一些弊端，它 <code>增加</code> 了对象之间的 <code>耦合性</code>。因此在系统设计时，遵循里氏替换原则，尽量 <code>避免</code>子类重写父类的方法，可以有效降低代码出错的可能性。</li>
</ul>
<h3 id="四、依赖倒置原则_DIP_（Dependency_Inversion_Principle）">四、依赖倒置原则 DIP （Dependency Inversion Principle）</h3>
<ul>
<li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li>
<li>抽象不应该依赖细节；</li>
<li>细节应该依赖抽象。</li>
<li>抽象：即抽象类或接口，两者是不能够实例化的。</li>
<li>细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zhangsan</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">(<span class="variable">$appleObject</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">'zhangsan eat '</span>.<span class="variable">$appleObject</span><span class="variable">-&gt;getName</span>();</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="string">"apple"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$apple</span> = <span class="keyword">new</span> Apple;</div><div class="line"><span class="variable">$zs</span> = <span class="keyword">new</span> Zhangsan;</div><div class="line"><span class="variable">$zs</span><span class="variable">-&gt;eat</span>(<span class="variable">$apple</span>);</div><div class="line"><span class="comment">//结果：zhangsan eat apple</span></div></pre></td></tr></table></figure>

<ul>
<li>以上例子是：<br>张三吃苹果，但是如果某一天张三又想吃香蕉了，那么这个时候发现张三类只能吃苹果，所以就不得不修改zhangsan这个类；就是因为Zhangsan类依赖于Apple类，两者是紧耦合的关系，其导致的结果就是系统的可维护性大大降低。</li>
<li>而根据依赖倒置原则，我们可以对上述代码做些修改，提取抽象的部分。首先我们提取出两个接口：People和Fruit，都提供各自必需的抽象方法，这样以后无论是增加Jim人类，还是增加Apple、Banana等各种水果，都只需要增加自己的实现类就可以了。由于遵循依赖倒置原则，只依赖于抽象，而不依赖于细节，所以增加类无需修改其他类。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//人类接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">People</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">(<span class="variable">$fruitObject</span>)</span></span>;</div><div class="line">}</div><div class="line"><span class="comment">//水果接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span>;</div><div class="line">}</div><div class="line"><span class="comment">//具体张三类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zhangsan</span> <span class="keyword">implements</span> <span class="title">People</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">(<span class="variable">$appleObject</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">'zhangsan eat '</span>.<span class="variable">$appleObject</span><span class="variable">-&gt;getName</span>();</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//具体苹果类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="string">"apple"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//具体香蕉类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="string">"banana"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="variable">$apple</span> = <span class="keyword">new</span> Apple;</div><div class="line"><span class="variable">$banana</span> = <span class="keyword">new</span> banana;</div><div class="line"><span class="variable">$zs</span> = <span class="keyword">new</span> Zhangsan;</div><div class="line"><span class="variable">$zs</span><span class="variable">-&gt;eat</span>(<span class="variable">$apple</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line"><span class="variable">$zs</span><span class="variable">-&gt;eat</span>(<span class="variable">$banana</span>);</div><div class="line"><span class="comment">/*</span></div><div class="line">输出结果： </div><div class="line"> hangsan eat apple</div><div class="line"> hangsan eat banana</div><div class="line"> */</div></pre></td></tr></table></figure>

<ul>
<li>People类是复杂的业务逻辑，属于高层模块，而Fruit是原子模块，属于低层模块。People依赖于抽象的Fruit接口，这就做到了：高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）。</li>
<li>People和Fruit接口与各自的实现类没有关系，增加实现类不会影响接口，这就做到了：抽象（抽象类或接口）不应该依赖于细节（具体实现类）。<br>Zhangsan、Apple、Banana实现类都要去实现各自的接口所定义的抽象方法，所以是依赖于接口的。这就做到了：细节（具体实现类）应该依赖抽象。</li>
<li><code>倒置</code> 刚开始按照正常人的一般思维方式，我想吃香蕉就是吃香蕉，想吃苹果就吃苹果，编程也是这样，都是按照面向实现的思维方式来设计。而现在要倒置思维，提取公共的抽象，面向接口（抽象类）编程。不再依赖于具体实现了，而是依赖于接口或抽象类，这就是依赖的思维方式 <code>倒置</code> 了。</li>
<li><code>依赖</code>  在接口方法中声明 <code>依赖对象</code>，也就是在接口方法的参数是 <code>依赖对象</code>，当然这个方法也可以是构造方法。</li>
</ul>
<h3 id="接口隔离原则_ISP（Interface-Segregation_Principle）">接口隔离原则 ISP（Interface-Segregation Principle）</h3>
<ul>
<li>通俗的讲：接口中的方法应该 <code>尽量少</code>，不要使接口过于臃肿，不要有很多不相关的逻辑方法。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iter</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">php</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">java</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ios</span><span class="params">()</span></span>;</div><div class="line">}</div><div class="line"><span class="comment">//zhangsan 只会php 和 java，但是为了实现接口规则，ios的方法也要重写为空方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zhangsan</span> <span class="keyword">implements</span> <span class="title">Iter</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">php</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我掌握php开发语言\n"</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">java</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我掌握java开发语言\n"</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ios</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line"></div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//lisi 只会ios，但是为了实现接口规则，java和php的方法也要重写为空方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lisi</span> <span class="keyword">implements</span> <span class="title">Iter</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ios</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我是ios程序员，我只掌握swift语言\n"</span>;</div><div class="line">    }</div><div class="line">    <span class="comment">//实现接口就必须实现接口的所有方法，所以在这里为了规则空方法的声明是多余的</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">java</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">    </div><div class="line">    }</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">php</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line"></div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//People1通过接口Iter依赖与张三类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People1</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">depend</span><span class="params">(<span class="variable">$object</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$object</span><span class="variable">-&gt;php</span>();</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//People1通过接口Iter依赖与李四类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People2</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">depend</span><span class="params">(<span class="variable">$object</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$object</span><span class="variable">-&gt;ios</span>();</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$zhangsan</span> = <span class="keyword">new</span> Zhangsan;</div><div class="line">        <span class="variable">$p1</span> = <span class="keyword">new</span> People1;</div><div class="line">        <span class="variable">$p1</span><span class="variable">-&gt;depend</span>(<span class="variable">$zhangsan</span>);</div><div class="line">        <span class="variable">$lisi</span> = <span class="keyword">new</span> Lisi;</div><div class="line">        <span class="variable">$p2</span> = <span class="keyword">new</span> People2;</div><div class="line">        <span class="variable">$p2</span><span class="variable">-&gt;depend</span>(<span class="variable">$lisi</span>);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Test;</div><div class="line"><span class="variable">$test</span><span class="variable">-&gt;run</span>();</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 程序运行结果：</div><div class="line"> * 我掌握php开发语言</div><div class="line"> * 我是ios程序员，我只掌握swift语言</div><div class="line"> * /</div></pre></td></tr></table></figure>

<p>以上程序类People1通过接口Iter依赖类Zhangsan，类People2通过接口Iter依赖类Lisi，zhangsan和lisi类都实现了Iter接口，导致必须去实现他们 <code>不需要</code> 的方法。</p>
<ul>
<li>优化后的代码：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">php</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">php</span><span class="params">()</span></span>;</div><div class="line">}</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">java</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">java</span><span class="params">()</span></span>;</div><div class="line">}</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ios</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ios</span><span class="params">()</span></span>;</div><div class="line">}</div><div class="line"><span class="comment">//zhangsan 只会php 和 java，但是为了实现接口规则，ios的方法也要重写为空方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zhangsan</span> <span class="keyword">implements</span> <span class="title">php</span>,<span class="title">java</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">php</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我掌握php开发语言\n"</span>;</div><div class="line">    }</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">java</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我掌握java开发语言\n"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//lisi 只会ios，但是为了实现接口规则，java和php的方法也要重写为空方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lisi</span> <span class="keyword">implements</span> <span class="title">ios</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ios</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我是ios程序员，我只掌握swift语言\n"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//People1通过接口Iter依赖与张三类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People1</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">depend</span><span class="params">(<span class="variable">$object</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$object</span><span class="variable">-&gt;php</span>();</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//People1通过接口Iter依赖与李四类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People2</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">depend</span><span class="params">(<span class="variable">$object</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$object</span><span class="variable">-&gt;ios</span>();</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$zhangsan</span> = <span class="keyword">new</span> Zhangsan;</div><div class="line">        <span class="variable">$p1</span> = <span class="keyword">new</span> People1;</div><div class="line">        <span class="variable">$p1</span><span class="variable">-&gt;depend</span>(<span class="variable">$zhangsan</span>);</div><div class="line"></div><div class="line">        <span class="variable">$lisi</span> = <span class="keyword">new</span> Lisi;</div><div class="line">        <span class="variable">$p2</span> = <span class="keyword">new</span> People2;</div><div class="line">        <span class="variable">$p2</span><span class="variable">-&gt;depend</span>(<span class="variable">$lisi</span>);</div><div class="line"></div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$test</span> = <span class="keyword">new</span> Test;</div><div class="line"><span class="variable">$test</span><span class="variable">-&gt;run</span>();</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 程序运行结果：</div><div class="line"> * 我掌握php开发语言</div><div class="line"> * 我是ios程序员，我只掌握swift语言</div><div class="line"> * /</div></pre></td></tr></table></figure>

<ul>
<li>看完上面的例子感觉和 <code>单一职责原则</code> 大同小异，其实还是不一样：<ul>
<li>第一，单一职责原则注重的是职责；而接口隔离原则注重对接口依赖的隔离。</li>
<li>第二，单一职责原则主要是 <code>约束类</code>，其次才是接口和方法，它针对的是程序中的实现和 <code>细节</code>；而接口隔离原则主要约束接口，主要针对 <code>抽象</code>，针对程序 <code>整体框架</code> 的构建。</li>
</ul>
</li>
</ul>
<h3 id="总结：">总结：</h3>
<ul>
<li>以上这些原则看起来不是很复杂，但是个人感觉要彻底理解透彻需要在实际工作中多实践和尝试。</li>
<li>原则是前人经验的总结，在软件设计中具有一定的指导作用，但是不能完全照搬这些原则。对于接口隔离原则来说，接口尽量小，但是也要有限度。对接口进行细化可以提高程序设计灵活性是不争的事实，但是如果过小，则会造成接口数量过多，使设计复杂化，所以一定要适度。</li>
</ul>
<h3 id="参考资料：">参考资料：</h3>
<ul>
<li><a href="http://willtea.iteye.com/blog/1704806" target="_blank" rel="external">面向对象的3个基本要素和5个基本设计原则(整理)</a></li>
<li><a href="http://coolshell.cn/articles/4535.html" target="_blank" rel="external">一些软件设计的原则</a></li>
<li><a href="http://www.cnblogs.com/hellojava/archive/2013/03/15/2960905.html" target="_blank" rel="external">设计模式六大原则</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="一、单一职责原则SRP_（Single-Resposibility_Principle）">一、单一职责原则SRP （Single-Resposibility Principle）</h3>
<ul>
<li>一个类，最好只做 <code>一件事</code>，只]]>
    </summary>
    
      <category term="面向对象" scheme="http://liangxifeng.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关键字说明]]></title>
    <link href="http://liangxifeng.com/2015/01/18/%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%B4%E6%98%8E/"/>
    <id>http://liangxifeng.com/2015/01/18/关键字说明/</id>
    <published>2015-01-18T14:22:43.000Z</published>
    <updated>2015-01-19T01:11:36.000Z</updated>
    <content type="html"><![CDATA[<h3 id="$this关键字">$this关键字</h3>
<p>我们访问php对象中的成员的时候，使用 “对象-&gt;成员” 的方式访问，比如：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$p1</span> = <span class="keyword">new</span> Person(); <span class="comment">//实例化对象</span></div><div class="line"><span class="variable">$p1</span><span class="variable">-&gt;name</span>;          <span class="comment">//在对象的外部访问对象的成员</span></div></pre></td></tr></table></figure>

<p><code>$this</code> 关键字完成对象内部成员的调用，它的本意就是 <code>这个</code> 的意思。<br><img src="/img/this.png" alt="this"><br>我们实例化三个实例对象$P1、$P2、$P3,这三个对象里面各自存在一个$this 分别代表对象$p1、$p2、$p3 。通过上图我们可以看到, <code>$this</code> 就是对象内部代表这个对象的引用,在对象内部和调用本对象的成员和对象外部调用对象的成员所使用的方式是一样的。</p>
<h3 id="parent关键字">parent关键字</h3>
<p>子类覆盖父类的方法，可以在子类中命名与父类同名的方法，但是如果这个时候还需要保留父类方法的功能，也就是说把被覆盖的方法原有的功能拿过来再加上自己的一点功能,可以通过两种方法实现在子类的方法中调用父类被覆盖的方法:</p>
<ul>
<li>一种是使用父类的 <code>“类名::”</code> 来调用父类中被覆盖的方法</li>
<li>一种是使用 <code>“parent::”</code> 的方试来调用父类中被覆盖的方法</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</div><div class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>;</div><div class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</div><div class="line"></div><div class="line">    <span class="comment">//定义一个构造方法参数为属性姓名$name、性别$sex 和年龄$age 进行赋值</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$name</span>,<span class="variable">$sex</span>,<span class="variable">$age</span>)</span></span></div><div class="line">    {   </div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;name</span> = <span class="variable">$name</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;sex</span> = <span class="variable">$sex</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;age</span> = <span class="variable">$age</span>;</div><div class="line">    }   </div><div class="line">    <span class="comment">//这个人可以说话的方法, 说出自己的属性</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></div><div class="line">    {   </div><div class="line">        <span class="keyword">echo</span> <span class="string">"我的名字叫:"</span>.<span class="variable">$this</span><span class="variable">-&gt;name</span>.<span class="string">" 性别:"</span>.<span class="variable">$this</span><span class="variable">-&gt;sex</span>.<span class="string">" 我的年龄是:"</span>.<span class="variable">$this</span><span class="variable">-&gt;age</span>.<span class="string">"&lt;br&gt;"</span>;</div><div class="line">    }   </div><div class="line">}</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="comment">//学生所在学校的属性</span></div><div class="line">    <span class="keyword">public</span> <span class="variable">$school</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$name</span>,<span class="variable">$sex</span>,<span class="variable">$age</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">parent</span>::__construct(<span class="variable">$name</span>,<span class="variable">$sex</span>,<span class="variable">$age</span>);</div><div class="line">        <span class="keyword">echo</span> <span class="string">'我继承了父类的构造方法&lt;br&gt;'</span>;</div><div class="line">    }</div><div class="line">    <span class="comment">//这个学生学习的方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">study</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我的名字叫:"</span>.<span class="variable">$this</span><span class="variable">-&gt;name</span>.<span class="string">" 我正在” .$this-&gt;school.”学习&lt;br&gt;"</span>;</div><div class="line">    }</div><div class="line">    <span class="comment">//这个学生可以说话的方法, 说出自己所有的属性,覆盖了父类的同名方法</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="comment">//使用父类的 类名: 来调用父类中被覆盖的方法;</span></div><div class="line">        <span class="comment">// Person::say();</span></div><div class="line">        <span class="comment">//或者使用 parent: 的方试来调用父类中被覆盖的方法;</span></div><div class="line">        <span class="keyword">parent</span>::say();</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我在"</span>.<span class="variable">$this</span><span class="variable">-&gt;school</span>.<span class="string">"上学&lt;br&gt;"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$student</span> = <span class="keyword">new</span> Student(<span class="string">'zhangsan'</span>,<span class="string">'男'</span>,<span class="number">28</span>);</div><div class="line"><span class="variable">$student</span><span class="variable">-&gt;school</span> = <span class="string">'北京大学'</span>;</div><div class="line"><span class="variable">$student</span><span class="variable">-&gt;say</span>();</div></pre></td></tr></table></figure>

<h3 id="以上代码结果是：">以上代码结果是：</h3>
<p>我继承了父类的构造方法<br>我的名字叫:zhangsan 性别:男 我的年龄是:28<br>我在北京大学上学</p>
<h3 id="final关键字">final关键字</h3>
<ul>
<li>这个关键字只能用来定义类和定义方法,不能使用 final 这个关键字来定义成员属性。</li>
<li>因为final 是常量的意思,我们在 PHP 里定义常量使用的是 define()函数,所以不能使用 final 来定义成员属性。</li>
<li>使用 final 关键标记的类不能被继承。</li>
<li>使用 final 关键标记的方法不能被子类覆盖,是最终版本。</li>
</ul>
<h3 id="static关键字">static关键字</h3>
<ul>
<li>类中描述成员属性和成员方法是静态的;</li>
<li><code>static</code> 成员能够限制外部的访问,因为static 的成员是 <code>属于类</code> 的,是不属于任何对象实例,是在类第一次被加载的时候分配的空间,其他类是无法访问的,只对类的实例共享,能一定程度对类该成员形成保护。</li>
<li>静态成员从内存的角度分析，是存储在 <code>初始化静态段</code>，在类第一次加载时放入，可以让堆内存中的每个对象共享。</li>
<li>类的静态变量,非常类似全局变量,能够被所有类的实例共享,类的静态方法也是一样的,类似于全局函数。</li>
<li>因为静态成员是在类第一次加载的时候就创建的,所以不需要实例化对象就可以以 <code>类名::$name</code> ，的形式访问静态属性。</li>
<li>因为静态属性是属于类的，不属于某一个对象，所以不允许在类的外部使用对象访问。</li>
<li>类里面的静态方法只能访问类的静态的属性。</li>
<li>类里面的静态方法是不能访问类的非静态成员的，因为 <code>$this</code> 这个引用指针是代表调用此方法的对象，静态成员访问使用的是 <code>类名::$name</code>，与对象无关。</li>
<li>在静态方法中访问其它静态成员我们使用的是一个特殊的类 <code>self::$name</code>。</li>
<li>非静态方法里可以访问静态成员，<code>self::$name</code>。</li>
</ul>
<p><img src="/img/static.png" alt="static"></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="comment">//下面是人的静态成员属性</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="variable">$myCountry</span>=<span class="string">"中国"</span>;</div><div class="line">    <span class="comment">// var $name; //人的名字</span></div><div class="line">    <span class="comment">//这是人的静态成员方法</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我是中国人&lt;br&gt;"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//输出静态属性</span></div><div class="line"><span class="keyword">echo</span> Person::<span class="variable">$myCountry</span>;</div><div class="line"><span class="comment">//访问静态方法</span></div><div class="line">Person::say();</div><div class="line"><span class="comment">//重新给静态属性赋值</span></div><div class="line">Person::<span class="variable">$myCountry</span>=<span class="string">"美国"</span>;</div><div class="line"><span class="keyword">echo</span> Person::<span class="variable">$myCountry</span>;</div></pre></td></tr></table></figure>

<h3 id="const关键字">const关键字</h3>
<ul>
<li>在 PHP 中定义常量使用的是“define()”这个函数,但是在类里面定义常量使用的是 <code>const</code> 这个关键字。</li>
<li>用 <code>const</code> 修饰的成员属性的访问方式和 <code>static</code> 修饰的成员访问的方式差不多,也是使用 <code>类名</code> ,在方法里面使用 <code>self</code> 关键字。但是不用使用 <code>$</code> 符号,也不能使用对象来访问。</li>
<li></li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></div><div class="line">{</div><div class="line">    <span class="comment">//定义一个常量 constant</span></div><div class="line">    <span class="keyword">const</span> constant = <span class="string">'constant value'</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showConstant</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="keyword">self</span>::constant . <span class="string">"\n"</span>; <span class="comment">//使用 self 访问,不要加”$”</span></div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="keyword">echo</span> MyClass::constant . <span class="string">"\n"</span>; <span class="comment">//使用类名来访问,也不加”$”</span></div><div class="line"><span class="variable">$class</span> = <span class="keyword">new</span> MyClass();</div><div class="line"><span class="variable">$class</span><span class="variable">-&gt;showConstant</span>();</div><div class="line"><span class="comment">// echo $class::constant; 是不允许的</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h3 id="$this关键字">$this关键字</h3>
<p>我们访问php对象中的成员的时候，使用 “对象-&gt;成员” 的方式访问，比如：</p>
<figure class="highlight php"><table><tr><td class="gutter"]]>
    </summary>
    
      <category term="面向对象" scheme="http://liangxifeng.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[特殊方法的应用]]></title>
    <link href="http://liangxifeng.com/2015/01/17/%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://liangxifeng.com/2015/01/17/特殊方法的应用/</id>
    <published>2015-01-17T09:41:56.000Z</published>
    <updated>2015-01-20T01:49:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="__get($propertyName)方法">__get($propertyName)方法</h3>
<ul>
<li>获取私有成员属性值</li>
<li>有一个参数，$propertyName 是获取成员属性的名称</li>
<li>返回值：获取属性的值</li>
<li>当我们在对象的外部调用私有属性的时候 <code>自动</code> 调用的。</li>
<li>如果成员属性不封装成私有的,对象本身就不会去自动调用这个方法。</li>
<li>如果没有设置__get()，在对象的外部是不允许调用内部私有属性的。</li>
</ul>
<h3 id="__set($property_name,_$value)方法">__set($property_name, $value)方法</h3>
<ul>
<li>用来为私有成员属性设置值的。</li>
<li>第一个参数为你要为设置值的属性名,第二个参数是要给属性设置的值。</li>
<li>返回值：无。</li>
<li>在对象外部直接设置私有属性值的时候 <code>自动</code> 调用的,同样属性私有的已经被封装上了。</li>
<li>如果成员属性不封装成私有的,对象本身就不会去自动调用这个方法。</li>
<li>如果没有设置__set()，在对象的外部是不允许设置私有属性的。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="comment">//下面是人的成员属性, 都是封装的私有成员</span></div><div class="line">    <span class="keyword">private</span> <span class="variable">$name</span>; <span class="comment">//人的名字</span></div><div class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>; <span class="comment">//人的性别</span></div><div class="line">    <span class="keyword">private</span> <span class="variable">$age</span>; <span class="comment">//人的年龄</span></div><div class="line">    <span class="comment">//__get()方法用来获取私有属性</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span><span class="params">(<span class="variable">$property_name</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"在直接获取私有属性值的时候,自动调用了这个__get()方法&lt;br&gt;"</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$this</span><span class="variable">-&gt;$property_name</span>))</div><div class="line">        {</div><div class="line">            <span class="keyword">return</span>(<span class="variable">$this</span><span class="variable">-&gt;$property_name</span>);</div><div class="line">        }</div><div class="line">        <span class="keyword">else</span></div><div class="line">        {</div><div class="line">            <span class="keyword">return</span>(<span class="keyword">NULL</span>);</div><div class="line">        }</div><div class="line">    }</div><div class="line">    <span class="comment">//__set()方法用来设置私有属性</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span><span class="params">(<span class="variable">$property_name</span>, <span class="variable">$value</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"在直接设置私有属性值的时候,自动调用了这个__set()方法为私有  属性赋值&lt;br&gt;"</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;$property_name</span> = <span class="variable">$value</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$p1</span>=<span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//直接为私有属性赋值的操作, 会 `自动调用` __set()方法进行赋值</span></div><div class="line"><span class="variable">$p1</span><span class="variable">-&gt;name</span>=<span class="string">"张三"</span>;</div><div class="line"><span class="variable">$p1</span><span class="variable">-&gt;sex</span>=<span class="string">"男"</span>;</div><div class="line"><span class="variable">$p1</span><span class="variable">-&gt;age</span>=<span class="number">20</span>;</div><div class="line"><span class="comment">//直接获取私有属性的值, 会 `自动调用` __get()方法,返回成员属性的值</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"姓名:"</span>.<span class="variable">$p1</span><span class="variable">-&gt;name</span>.<span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"性别:"</span>.<span class="variable">$p1</span><span class="variable">-&gt;sex</span>.<span class="string">"&lt;br&gt;"</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">"年龄:"</span>.<span class="variable">$p1</span><span class="variable">-&gt;age</span>.<span class="string">"&lt;br&gt;"</span>;</div></pre></td></tr></table></figure>

<p>以上代码如果不加上<strong>get()和</strong>set()方法,程序就会出错,因为不能在类的外部操作私有成员,而上面的代码是通过 <code>自动调用</code> <strong>get()和</strong>set()方法来帮助我们直接存取封装的私有成员的。</p>
<h3 id="__isset()方法">__isset()方法</h3>
<ul>
<li>如果在一个对象外面使用“isset()”这个函数去测定对象里面的成员是否被设定分两种情况：<ul>
<li>如果对象里面成员是公有的,我们就可以使用这个函数来测定成员属性。</li>
<li>如果是私有的成员属性,这个函数就不起作用了,原因就是因为私有的被封装了,在外部不可见。</li>
</ul>
</li>
<li>在类里面加上一个 <code>__isset()</code> 方法就可以了,当在类外部使用 <code>isset()</code>函数来测定对象里面的私有成员是否被设定时, 就会 <code>自动</code> 调用类里的“__isset()”方法了帮我们完成这样的操作。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span><span class="params">(<span class="variable">$nm</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用isset()函数测定私有成员$nm时,自动调用&lt;br&gt;"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable">$this</span><span class="variable">-&gt;$nm</span>);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$p1</span> =  <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//在使用isset()函数测定私有成员时,`自动调用` __isset()方法帮我们完成,返回结果为true</span></div><div class="line"><span class="keyword">echo</span> var_dump(<span class="keyword">isset</span>(<span class="variable">$p1</span><span class="variable">-&gt;name</span>)).<span class="string">"&lt;br&gt;"</span>;</div></pre></td></tr></table></figure>

<h3 id="__unset()方法">__unset()方法</h3>
<p>道理和__isset()方法一样，只不过是在对象的外部删除内部的私有成员时 <code>自动调用</code> 的。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">private</span> <span class="variable">$name</span>;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span><span class="params">(<span class="variable">$nm</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"当在类外部使用unset()函数来删除私有成员时自动调用的&lt;br&gt;"</span>;</div><div class="line">        <span class="keyword">unset</span>(<span class="variable">$this</span><span class="variable">-&gt;$nm</span>);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$p1</span> = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">//在使用unset()函数删除私有成员时,`自动调用` __unset()方法帮我们完成,删除name私有属性</span></div><div class="line"><span class="keyword">unset</span>(<span class="variable">$p1</span><span class="variable">-&gt;name</span>);</div></pre></td></tr></table></figure>

<p><code>__set()</code>、<code>__get()</code>、<code>__isset()</code>、<code>__unset()</code> 这四个方法都是我们添加到对象里面的,在需要时 <code>自动调用</code> 的,来完成在对象外部对对象内部私有属性的操作。</p>
<hr>
<h3 id="__toString()方法">__toString()方法</h3>
<ul>
<li>在直接输出对象引用时 <code>自动调用</code> 的，比如 </li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="variable">$foo</span>;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$foo</span>)</span> </span></div><div class="line">    {</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;foo</span> = <span class="variable">$foo</span>;</div><div class="line">    }</div><div class="line">    <span class="comment">//定义一个__toString方法,返加一个成员属性$foo</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span></div><div class="line">    {</div><div class="line">        <span class="keyword">return</span> <span class="variable">$this</span><span class="variable">-&gt;foo</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$class</span> = <span class="keyword">new</span> TestClass(<span class="string">'Hello'</span>);</div><div class="line"><span class="comment">//直接输出对象</span></div><div class="line"><span class="keyword">echo</span> <span class="variable">$class</span>; <span class="comment">//这个时候会 `自动调用` TestClass类里面的 __toString()方法，如果不定义__toString()方法，程序会报错</span></div></pre></td></tr></table></figure>



<h3 id="clone_克隆对象">clone 克隆对象</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$p1</span>=<span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">20</span>);</div><div class="line"><span class="comment">//使用“clone”克隆新对象 p2,和 p1 对象具有相同的属性和方法。</span></div><div class="line"><span class="variable">$p2</span>=<span class="keyword">clone</span> <span class="variable">$p1</span>;</div><div class="line"><span class="variable">$p2</span><span class="variable">-&gt;say</span>();</div></pre></td></tr></table></figure>

<h3 id="__clone()_方法">__clone() 方法</h3>
<ul>
<li>对象克隆时 <code>自动调用</code> 的方法。</li>
<li>自动包含 <code>$this</code>  和 <code>$that</code>  两个指针, <code>$this</code> 指向复本,而 <code>$that</code> 指向原本。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="comment">//下面是人的成员属性</span></div><div class="line">    <span class="keyword">var</span> <span class="variable">$name</span>; <span class="comment">//人的名字</span></div><div class="line">    <span class="keyword">var</span> <span class="variable">$sex</span>; <span class="comment">//人的性别</span></div><div class="line">    <span class="keyword">var</span> <span class="variable">$age</span>; <span class="comment">//人的年龄</span></div><div class="line">    <span class="comment">//定义一个构造方法参数为属性姓名$name、性别$sex 和年龄$age 进行赋值</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$name</span>=<span class="string">""</span>, <span class="variable">$sex</span>=<span class="string">""</span>, <span class="variable">$age</span>=<span class="string">""</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;name</span>=<span class="variable">$name</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;sex</span>=<span class="variable">$sex</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;age</span>=<span class="variable">$age</span>;</div><div class="line">    }</div><div class="line">    <span class="comment">//这个人可以说话的方法, 说出自己的属性</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我的名字叫:"</span>.<span class="variable">$this</span><span class="variable">-&gt;name</span>.<span class="string">" 性别:"</span>.<span class="variable">$this</span><span class="variable">-&gt;sex</span>.<span class="string">" 我的年龄是:"</span>.<span class="variable">$this</span><span class="variable">-&gt;age</span>.<span class="string">"&lt;br&gt;"</span>;</div><div class="line">    }</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="comment">//$this 指的复本 p2, 而$that 是指向原本 p1,这样就在本方法里,改变了复本的属性。</span></div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;name</span>=<span class="string">"我是假的$that-&gt;name"</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;age</span>=<span class="number">30</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$p1</span>=<span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">20</span>);</div><div class="line"><span class="variable">$p2</span>=<span class="keyword">clone</span> <span class="variable">$p1</span>;</div><div class="line"><span class="variable">$p1</span><span class="variable">-&gt;say</span>();</div><div class="line"><span class="variable">$p2</span><span class="variable">-&gt;say</span>();</div></pre></td></tr></table></figure>

<p>执行结果是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">我的名字叫:张三 性别:男 我的年龄是<span class="pseudo">:20</span></div><div class="line">我的名字叫:我是假的张三 性别:男 我的年龄是<span class="pseudo">:30</span></div></pre></td></tr></table></figure>

<h3 id="__call()_方法">__call() 方法</h3>
<ul>
<li>使用对象调用内部方法时候，不存在该方法，那么程序就会出错,然后程序退出不能继续执行。</li>
<li>__call() 就是调用不存在方法的时候 <code>自动调用</code> 的</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></div><div class="line">{</div><div class="line">    <span class="comment">//调用不存的方法时自动调用的方法,第一个参数为方法名,第二个参数是数组参数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span><span class="params">(<span class="variable">$function_name</span>,<span class="variable">$args</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">print</span> <span class="string">"你所调用的函数:$function_name(参数:"</span>;</div><div class="line">        print_r(<span class="variable">$args</span>);</div><div class="line">        <span class="keyword">print</span> <span class="string">")不存在!&lt;br&gt;\n"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="comment">//产生一个Test类的对象</span></div><div class="line"><span class="variable">$test</span>=<span class="keyword">new</span> Test();</div><div class="line"><span class="comment">//调用对象里不存在的方法</span></div><div class="line"><span class="variable">$test</span><span class="variable">-&gt;demo</span>(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>);</div><div class="line"><span class="comment">//程序不会退出可以执行到这里</span></div><div class="line"><span class="keyword">echo</span> <span class="string">"this is a test&lt;br&gt;"</span>;</div></pre></td></tr></table></figure>

<p>以上程序执行结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">你所调用的函数:demo(参数:Array ( [<span class="number">0</span>]<span class="function"> =&gt;</span> one [<span class="number">1</span>]<span class="function"> =&gt;</span> two [<span class="number">2</span>]<span class="function"> =&gt;</span> three ) )不存在!</div><div class="line"><span class="keyword">this</span> <span class="keyword">is</span> a test.</div></pre></td></tr></table></figure>

<h3 id="unserialize()">unserialize()</h3>
<ul>
<li>为了方便把一个对象在网络上传输，可以把整个对象转换为二进制串，传输到目的地时，再还原为原来的对象，这个过程称之为串行化。</li>
<li><code>serialize()</code> 串行化一个对象;</li>
<li><code>unserialize()</code> 反串行化对象;</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$p1</span>=<span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">20</span>);</div><div class="line"><span class="variable">$p1_string</span>=serialize(<span class="variable">$p1</span>); <span class="comment">//把一个对象串行化,返一个字符串</span></div><div class="line"><span class="keyword">echo</span> <span class="variable">$p1_string</span>.<span class="string">"&lt;br&gt;"</span>; <span class="comment">//串行化的字符串我们通常不去解析</span></div><div class="line"><span class="variable">$p2</span>=unserialize(<span class="variable">$p1_string</span>); <span class="comment">//把一个串行化的字符串反串行化形成对象$p2</span></div></pre></td></tr></table></figure>

<h3 id="__sleep()">__sleep()</h3>
<ul>
<li>对象串行化的时候会调用该方法。</li>
<li>函数不接受任何参数, 但返回一个数组，其中包含需要串行化的属性。</li>
<li>末被包含的属性将在串行化时被忽略。</li>
<li>如果没有__sleep()方法,PHP 将保存所有属性。</li>
<li>在对象使用serialize()序列化的时候 <code>自动调用</code> 的。</li>
</ul>
<h3 id="__wakeup()">__wakeup()</h3>
<ul>
<li>由二进制串重新组成一个对象的时候,则会 <code>自动调用</code> __wakeup(),做一些对象醒来就要做的动作。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</div><div class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>;</div><div class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</div><div class="line"></div><div class="line">    <span class="comment">//定义一个构造方法参数为属性姓名$name、性别$sex 和年龄$age 进行赋值</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(<span class="variable">$name</span>=<span class="string">""</span>,<span class="variable">$sex</span>=<span class="string">""</span>,<span class="variable">$age</span>=<span class="string">""</span>)</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;name</span> = <span class="variable">$name</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;sex</span> = <span class="variable">$sex</span>;</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;age</span> = <span class="variable">$age</span>;</div><div class="line">    }</div><div class="line">    <span class="comment">//这个人可以说话的方法, 说出自己的属性</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"我的名字叫:"</span>.<span class="variable">$this</span><span class="variable">-&gt;name</span>.<span class="string">" 性别:"</span>.<span class="variable">$this</span><span class="variable">-&gt;sex</span>.<span class="string">" 我的年龄是:"</span>.<span class="variable">$this</span><span class="variable">-&gt;age</span>.<span class="string">"&lt;br&gt;"</span>;</div><div class="line">    }</div><div class="line">    <span class="comment">//指定串行化时把返回的数组中$name 和$age 值串行化,忽略没在数组中的属性$sex</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">"name"</span>,<span class="string">"age"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</div><div class="line">    }</div><div class="line">    <span class="comment">//重新生成对象时,并重新赋值$age为40</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        <span class="variable">$this</span><span class="variable">-&gt;age</span> = <span class="number">40</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$p1</span>=<span class="keyword">new</span> Person(<span class="string">"张三"</span>, <span class="string">"男"</span>, <span class="number">20</span>);</div><div class="line"><span class="comment">//把一个对象串行化,返一个字符串,调用了__sleep()方法,忽略没在数组中的属性$sex</span></div><div class="line"><span class="variable">$p1_string</span>=serialize(<span class="variable">$p1</span>);</div><div class="line"><span class="keyword">echo</span> <span class="variable">$p1_string</span>.<span class="string">"&lt;br&gt;"</span>;      <span class="comment">//串行化的字符串我们通常不去解析</span></div><div class="line"><span class="variable">$p2</span>=unserialize(<span class="variable">$p1_string</span>); <span class="comment">//反串行化形成对象$p2重新赋值$age为40</span></div><div class="line"><span class="variable">$p2</span><span class="variable">-&gt;say</span>();</div></pre></td></tr></table></figure>

<p>以上代码输出结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">O</span><span class="pseudo">:6</span><span class="pseudo">:"Person"</span><span class="pseudo">:2</span>:<span class="rules">{<span class="rule"><span class="attribute">s</span>:<span class="value"><span class="number">4</span>:<span class="string">"name"</span></span></span>;<span class="rule"><span class="attribute">s</span>:<span class="value"><span class="number">6</span>:<span class="string">"张三"</span></span></span>;<span class="rule"><span class="attribute">s</span>:<span class="value"><span class="number">3</span>:<span class="string">"age"</span></span></span>;<span class="rule"><span class="attribute">i</span>:<span class="value"><span class="number">20</span></span></span>;<span class="rule">}</span></span></div><div class="line">我的名字叫:张三 性别: 我的年龄是<span class="pseudo">:40</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<h3 id="__get($propertyName)方法">__get($propertyName)方法</h3>
<ul>
<li>获取私有成员属性值</li>
<li>有一个参数，$propertyName 是获取成员属性的名称</li>
<li>返回值：获取属性的值</]]>
    </summary>
    
      <category term="面向对象" scheme="http://liangxifeng.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo速度优化]]></title>
    <link href="http://liangxifeng.com/2015/01/17/hexo%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
    <id>http://liangxifeng.com/2015/01/17/hexo速度优化/</id>
    <published>2015-01-17T03:26:44.000Z</published>
    <updated>2015-01-17T03:31:23.000Z</updated>
    <content type="html"><![CDATA[<p>如果域名已经备过案，那么可以把博客托管到国内的免费服务器空间，以下两篇文章介绍如何把自己的博客托管到国内服务器：</p>
<ul>
<li><a href="http://zipperary.com/2013/11/13/blog-to-stdyun/" target="_blank" rel="external">托管博客到STDYUN</a></li>
<li><a href="http://zipperary.com/2013/11/23/hexo-to-gitcafe/" target="_blank" rel="external">托管博客到gitcafe</a></li>
</ul>
<p>由于我的域名没有备案，所以还是将自己的博客托管在国外的github上，刚刚建好后速度那是相当的慢，<code>无法忍受</code>，加速的原理相信有过开发经验的人都明白，就是把对应主题静态页面加载google的类库和css等修改为加载国内的即可。</p>
<p>在hexo的初始化init目录下使用如下命令，</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grep</span> <span class="string">'jquery'</span> -<span class="keyword">r</span> ./ </div><div class="line"><span class="keyword">vim</span> ./themes/light/layout/_partial/after_footer.ejs</div></pre></td></tr></table></figure>


<p>搜索使用 jquery 的位置，如果是用的 google 的，则替换成国内的百度,</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//libs.baidu.<span class="keyword">com</span>/jquery/<span class="number">2.0</span>.<span class="number">3</span>/jquery.<span class="built_in">min</span>.js。</div></pre></td></tr></table></figure>

<p>然后替换google fonts，同样的方法，</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grep</span> <span class="string">'fonts'</span> -<span class="keyword">r</span> ./</div><div class="line"><span class="keyword">grep</span> <span class="string">'fonts.google'</span> -<span class="keyword">r</span> ./</div><div class="line"><span class="keyword">vim</span> ./themes/landscape/layout/_partial/head.ejs</div><div class="line"><span class="keyword">vim</span> ./themes/light/<span class="keyword">source</span>/css/_base/variable.styl</div></pre></td></tr></table></figure>

<p>找到后替换为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">//fonts.useso.com/css?family</span>=<span class="string">Lato:400,400italic</span></div></pre></td></tr></table></figure>

<p>修改完毕后，hexo d -g 部署到线上，在此访问 <a href="http://www.liangxifeng.com" target="_blank" rel="external">我的博客</a>，速度快了许多，但是跟国内服务器比依然稍逊色了一些，不过相对之前的速度我已经很知足了，俗话说的好 <code>知足长乐</code> !</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如果域名已经备过案，那么可以把博客托管到国内的免费服务器空间，以下两篇文章介绍如何把自己的博客托管到国内服务器：</p>
<ul>
<li><a href="http://zipperary.com/2013/11/13/blog-to-stdyun/" target="_]]>
    </summary>
    
      <category term="hexo" scheme="http://liangxifeng.com/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对象的数据类型及存储方式]]></title>
    <link href="http://liangxifeng.com/2015/01/17/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://liangxifeng.com/2015/01/17/对象的数据类型及存储方式/</id>
    <published>2015-01-17T01:52:54.000Z</published>
    <updated>2015-01-17T01:55:22.000Z</updated>
    <content type="html"><![CDATA[<p>对像在 PHP 里面和整型、浮点型一样,也是一种数据类,都是存储不同类型数据用的，在运行的时候都要加载到内存中去用。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">{</div><div class="line">    <span class="comment">//下面是人的成员属性</span></div><div class="line">    <span class="keyword">var</span> <span class="variable">$name</span>; <span class="comment">//人的名字</span></div><div class="line">    <span class="keyword">var</span> <span class="variable">$sex</span>; <span class="comment">//人的性别</span></div><div class="line">    <span class="keyword">var</span> <span class="variable">$age</span>; <span class="comment">//人的年龄</span></div><div class="line">    <span class="comment">//下面是人的成员方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span> //这个人可以说话的方法</span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"这个人在说话"</span>;</div><div class="line">    }</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span> //这个人可以走路的方法</span></div><div class="line">    {</div><div class="line">        <span class="keyword">echo</span> <span class="string">"这个人在走路"</span>;</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$p1</span>=<span class="keyword">new</span> Person();</div><div class="line"><span class="variable">$p2</span>=<span class="keyword">new</span> Person();</div><div class="line"><span class="variable">$p3</span>=<span class="keyword">new</span> Person();</div></pre></td></tr></table></figure>

<p>$p1/$p2/$p3 是对象名称在 <code>栈内存</code> 里面,new Person()是真正的对象是在 <code>堆内存</code> 里面的。</p>
<p><img src="/img/memory.jpg" alt="memory"><br>从上图可以看出$p1=new Person();等号右边是真正的对象实例,在堆内存里面的实体,上图一共有 3 次 new Person(),所以会在堆里面开辟 3 个空间,产生 3 个实例对象,每个对象之间都是相互独立的,使用自己的空间,在 PHP 里面,只要有一个 new 这个关键字出现就会实例化出来一个对象,在堆里面开辟一块自己的空间。每个在堆里面的实例对象是存储属性的,比如说,现在堆里面的实例对象里面都存有姓名、性别和年龄。每个属性又都有一个地址。<br>$p1=new Person(); <code>$p1</code> 是一个引用变量,通过赋值运算符“=”把对象的首地址赋给 <code>$p1</code> 这个引用变量,所以 <code>$p1</code> 是存储对象首地址的变量,$p1 放在栈内存里边,<code>$p1</code> 相当于一个指针指向堆里面的对象,所以我们可以通过$p1 这个引用变量来操作对象,通常我们也称对象引用为对象。</p>
<hr>
<p>参考文章：<a href="http://www.cnblogs.com/lln7777/archive/2012/03/14/2396164.html" target="_blank" rel="external">http://www.cnblogs.com/lln7777/archive/2012/03/14/2396164.html</a></p>
<h3 id="栈内存与堆内存的区别">栈内存与堆内存的区别</h3>
<p>因为PHP本身也是C语言写的，所以在此介绍一下C语言中分配内存的原理：<br>内存从逻辑上说大体上是分为 4 段, <code>栈空间段</code>、<code>堆空间段</code>、<code>代码段</code>、<code>初始化静态段</code>,程序里面不同的声明放在不同的内存段里面。</p>
<ul>
<li><code>栈空间段</code> 是存储占用相同空间长度并且占用空间小的数据类型的地方,比如说整型 1,10,<br>100,1000,10000,100000 等等,在内存里面占用空间是等长的,都是 64 位 4 个字节。</li>
<li><code>栈空间段</code> 数据长度不定长,而且占有空间很大的数据类型数据的存储。</li>
<li>栈内存是可以直接存取的,而堆内存是不可以直接存取的内存。对于我们的对象来说就是一种大的数据类型而且是占用空间不定长的类型,所以说对象是放在堆里面的,但对象名称是放在栈里面的,这样通过对象名称就可以使用对象了。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>; <span class="comment">//全局初始化区 </span></div><div class="line"><span class="keyword">char</span> *p1; <span class="comment">//全局未初始化区 </span></div><div class="line">main() </div><div class="line">{ </div><div class="line">     <span class="keyword">int</span> b; <span class="comment">//栈 </span></div><div class="line">     <span class="keyword">char</span> s[] = <span class="string">"abc"</span>; <span class="comment">//栈 </span></div><div class="line">     <span class="keyword">char</span> *p2; <span class="comment">//栈 </span></div><div class="line">     <span class="keyword">char</span> *p3 = <span class="string">"123456"</span>; <span class="comment">//123456\0在常量区，p3在栈上。 </span></div><div class="line">     <span class="keyword">static</span> <span class="keyword">int</span> c =<span class="number">0</span>； <span class="comment">//全局（静态）初始化区 </span></div><div class="line">     p1 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>); <span class="comment">//堆 </span></div><div class="line">     p2 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);  <span class="comment">//堆 </span></div><div class="line"> }</div></pre></td></tr></table></figure>

<ul>
<li><p>堆和栈的第一个区别就是申请方式不同：栈（英文名称是stack）是系统自动分配空间的，例如我们定义一个 char a；系统会自动在栈上为其开辟空间。而堆（英文名称是heap）则是程序员根据需要自己申请的空间，例如malloc（10）；开辟十个字节的空间。</p>
</li>
<li><p>由于栈上的空间是自动分配自动回收的，所以栈上的数据的生存周期只是在函数的运行过程中，运行后就释放掉，不可以再访问。而堆上的数据只要程序员不释放空间，就一直可以访问到，不过缺点是一旦忘记释放会造成内存泄露。</p>
</li>
</ul>
<h5 id="关于堆和栈区别的比喻">关于堆和栈区别的比喻</h5>
<ul>
<li><p>使用栈就象我们去饭馆里吃饭，只管点菜（发出申请）、付钱、和吃（使用），吃饱了就走，不必理会切菜、洗菜等准备工作和洗碗、刷锅等扫尾工作，他的好处是快捷，但是自由度小。 </p>
</li>
<li><p>使用堆就象是自己动手做喜欢吃的菜肴，比较麻烦，但是比较符合自己的口味，而且自由度大。比喻很形象，说的很通俗易懂，不知道你是否有点收获。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>对像在 PHP 里面和整型、浮点型一样,也是一种数据类,都是存储不同类型数据用的，在运行的时候都要加载到内存中去用。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div clas]]>
    </summary>
    
      <category term="面向对象" scheme="http://liangxifeng.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[面向对象基础概念]]></title>
    <link href="http://liangxifeng.com/2015/01/15/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>http://liangxifeng.com/2015/01/15/面向对象基础概念/</id>
    <published>2015-01-15T01:15:08.000Z</published>
    <updated>2015-01-18T13:37:18.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是对象？">什么是对象？</h3>
<ul>
<li>对象就是可以<code>看到</code>、<code>感觉到</code>、<code>听到</code>、<code>触摸到</code>、<code>尝到</code>、或<code>闻到</code>的东西。</li>
<li>对象是一个自包含的实体，用一组可识别的特性和行为来标示，客观世界是由对象和对象之间的联系组成的。</li>
</ul>
<h3 id="什么是类？">什么是类？</h3>
<ul>
<li>就是具有相同的属性和功能的对象的<code>抽象</code>的集合。</li>
<li>在面向对象的编程语言中,类是一个独立的程序单位,它应该有一个类名并包括属性说明和服务说明两个主要部分。</li>
</ul>
<h3 id="类与对象的关系">类与对象的关系</h3>
<ul>
<li>类与对象的关系就如模具和铸件的关系,类的实例化<code>结果</code>就是<code>对象</code>。</li>
<li>而对一类对象的<code>抽象</code>就是类。</li>
<li>类描述了一组有 <code>相同特性</code> (属性) 和 <code>相同行为</code> (方法) 的对象。</li>
</ul>
<hr>
<h3 id="面向对象的三大特性">面向对象的三大特性</h3>
<p>一、 <strong>封装</strong></p>
<ul>
<li>第一、良好的封装能够减少耦合</li>
<li>第二、类的内部可以实现自由修改</li>
<li>第三、类具有清晰的对外接口</li>
<li>第四、封装的原则在软件上的反映是:要求使对象以外的部分不能随意存取对象的内部数据(属性),从而有效的避免了外部错误对它的”交叉感染”,使软件错误能够局部化,大大减少查错和排错的难度。</li>
<li>第五、使用 <code>private</code> 这个关键字来对属性和方法进行封装。</li>
</ul>
<h3 id="访问类型">访问类型</h3>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">private</th>
<th style="text-align:center">protected</th>
<th style="text-align:center">public</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个类中</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td>类的子类中</td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td>所有的外部成员</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">√</td>
</tr>
</tbody>
</table>
<p>二、 <strong>继承</strong></p>
<ul>
<li>对象的继承代表了一种 <code>is-a</code> 的关系</li>
<li>如果两个对象 <code>A</code> 和 <code>B</code>  可以表述为 <code>B</code> 是 <code>A</code>，则表明 <code>B</code> 可以继承 <code>A</code></li>
<li>比如：猫是动物，则猫类可以继承动物类</li>
</ul>
<p>三、 <strong>多态</strong></p>
<ul>
<li>不同的对象可以执行相同的动作，但是要通过他们 <code>自己</code> 的实现代码来执行。</li>
<li>原理：当方法被调用时，无论对象是否被转化为其父类，都只有位于对象继承链最末端的方法实现会被调用。<ul>
<li>子类以父类的身份出现，比如：儿子代表老子表演，化妆后就是以父亲身份出现了</li>
<li>子类在工作时要以自己的方式来实现，比如：儿子模仿得再好，那也是模仿，儿子只能用自己理解的方式去模仿父亲的作品。</li>
<li>子类以父类的身份出现时，子类特有的属性和方法不可以使用。比如：儿子代表父亲出演，绝活是不能表示出来的。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="什么是抽象方法？">什么是抽象方法？</h3>
<p>类里面定义的没有方法体的方法就是抽象方法，声明抽象方法时还要加一个关键字 <code>abstract</code> 来修饰。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span>;</div><div class="line"><span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>

<h3 id="什么是抽象类？">什么是抽象类？</h3>
<p>抽象类也要使用 <code>abstract</code> 关键字来修饰，在抽象类里面可以有不是抽象的方法和成员属性,但只要有一个方法是抽象的方法,这个类就必须声明为抽象类。<br>特性：</p>
<ul>
<li>抽象类不能实例化</li>
<li>拥有尽可能多的代码，拥有尽可能少的数据。</li>
<li>子类必须把父类中的抽象方法全部都实现。</li>
<li>通常代表一个抽象的概念，他提供一个继承的出发点，设计一个新抽象类时，一定是用来继承的。</li>
<li>特殊的类。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></div><div class="line">{</div><div class="line">    <span class="keyword">var</span> <span class="variable">$test</span>;</div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span>;</div><div class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun3</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        ....</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$demo</span>=<span class="keyword">new</span> Demo(); <span class="comment">//抽象类为能产生实例对象,所以这样做是错的,实例化对象交给子类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Demo</span></span></div><div class="line">{</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        ...</div><div class="line">    }</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span></div><div class="line">    {</div><div class="line">        ...</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="variable">$test</span>=<span class="keyword">new</span> Test(); <span class="comment">//子类可以实例化对象,因为实现了父类中所有抽象方法</span></div></pre></td></tr></table></figure>

<h3 id="什么是接口？">什么是接口？</h3>
<ul>
<li>接口里面所有的方法必须都是声明为抽象方法。</li>
<li>接口里面不能声明变量,而且接口里面所有的成员都是 public 权限的。所以子类在实现的时候也一定要使<br>用 public 权限实现，关键词 <code>interface</code>。</li>
<li>一个类只能继承一个抽象类或普通类，但可实现多个接口，（<code>单继承</code>，<code>多接口</code>）。</li>
<li>特殊的抽象类。</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个接口使用 interface 关键字,“One”为接口名称</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">One</span></span></div><div class="line">{</div><div class="line">    <span class="comment">//因为在接口里面不能用变量成员,所以定义一个常量</span></div><div class="line">    <span class="keyword">const</span> constant = <span class="string">'constant value'</span>;</div><div class="line">    <span class="comment">//定义了一个抽象方法”fun1”，因为接口里面所有的方法都是抽象方法,所以在声明抽象方法的时候就不用像抽象类那样使用“abstract”。</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun1</span><span class="params">()</span></span>;</div><div class="line">    <span class="comment">//定义了抽象方法”fun2”</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fun2</span><span class="params">()</span></span>;</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用 extends 继承一个类,使用 implements 实现多个接口</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Four</span> <span class="keyword">extends</span> 类名一 <span class="title">implemtns</span> 接口一, 接口二, ... .</span></div><div class="line">{</div><div class="line">    <span class="comment">//所有接口中的方法都要实现才可以实例化对象</span></div><div class="line">    ... ... ... ..</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="抽象类与接口的关系">抽象类与接口的关系</h3>
<ul>
<li>接口是特殊的抽象类。</li>
<li>类是对对象的抽象。</li>
<li>抽象类是对类的抽象。</li>
<li>接口是对行为的抽象。</li>
<li>如果行为跨越不同类的对象，可使用接口；对于一些相似的类对象，用继承抽象类。<ul>
<li>比如：猫、狗它们都是动物，它们之间有很多 <code>相似</code> 的地方，所以我们应让它们继承动物这个抽象类。</li>
<li>而飞机、麻雀、超人是完全不相关的类，叮当是动漫的角色，孙悟空是古代神话人物，这也是 <code>不相关</code> 的类，但是他们之间又有 <code>共同点</code>，前三者都会飞，后两者都会变出东西，所以此时让他们去实现相同的接口来达到我们设计的目的。</li>
</ul>
</li>
<li>从设计角度讲，抽象类是从子类中发现了公共东西，泛化出父类，然后子类继承，而接口是根本不知子类的存在，方法如何实现还不确认，预先定义。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是对象？">什么是对象？</h3>
<ul>
<li>对象就是可以<code>看到</code>、<code>感觉到</code>、<code>听到</code>、<code>触摸到</code>、<code>尝到</code>、或<code>闻到</code]]>
    </summary>
    
      <category term="面向对象" scheme="http://liangxifeng.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自己的第一个独立域名的博客]]></title>
    <link href="http://liangxifeng.com/2015/01/12/%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%8B%AC%E7%AB%8B%E5%9F%9F%E5%90%8D%E5%8D%9A%E5%AE%A2/"/>
    <id>http://liangxifeng.com/2015/01/12/自己的第一个独立域名博客/</id>
    <published>2015-01-12T04:16:19.000Z</published>
    <updated>2015-01-12T04:14:11.000Z</updated>
    <content type="html"><![CDATA[<p>曾经在qq空间，phpchina: <a href="http://bbs.phpchina.com/home.php?mod=space&amp;uid=870297&amp;do=blog&amp;view=me&amp;from=space" target="_blank" rel="external">http://bbs.phpchina.com/home.php?mod=space&amp;uid=870297&amp;do=blog&amp;view=me&amp;from=space</a>,<br>后来有了有道云笔记，就在云笔记中记录自己技术成长道路的点点滴滴，直到知道hexo后，才决定使用hexo+github pags 建立自己的独立域名博客。<br>到今天为止博客基本搭建完毕, 接下来的日子要养成总结的好习惯，把自己日常经历过的项目经验、技术难题等等记录下来。</p>
<hr>
<p>参考资料:  </p>
<p>安装配置</p>
<ul>
<li><a href="http://zipperary.com/categories/hexo" target="_blank" rel="external">http://zipperary.com/categories/hexo</a>   </li>
<li><a href="http://blog.csdn.net/yuguiyang1990/article/details/39499513" target="_blank" rel="external">http://blog.csdn.net/yuguiyang1990/article/details/39499513</a>  </li>
<li><a href="http://zipperary.com/2013/05/28/hexo-guide-2/" target="_blank" rel="external">http://zipperary.com/2013/05/28/hexo-guide-2/</a>  </li>
<li><a href="http://blog.sunnyxx.com/2014/02/27/hexo_startup/" target="_blank" rel="external">http://blog.sunnyxx.com/2014/02/27/hexo_startup/</a>  </li>
<li><a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="external">http://www.cnblogs.com/zhcncn/p/4097881.html</a>  </li>
</ul>
<p>hexo官网：<a href="http://hexo.io/docs/" target="_blank" rel="external">http://hexo.io/docs/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>曾经在qq空间，phpchina: <a href="http://bbs.phpchina.com/home.php?mod=space&amp;uid=870297&amp;do=blog&amp;view=me&amp;from=space" target="_bla]]>
    </summary>
    
      <category term="随笔" scheme="http://liangxifeng.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://liangxifeng.com/2015/01/08/hello-world/"/>
    <id>http://liangxifeng.com/2015/01/08/hello-world/</id>
    <published>2015-01-08T09:14:51.000Z</published>
    <updated>2015-01-08T09:14:51.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
